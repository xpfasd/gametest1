二、广告接入指南
2.1、SDK演示示例
DEMO地址（测试广告）：

DEMO地址（正式广告）：https://www.ahagamecenter.com/h5sdk_demo_prod.html

注意事项：

*如果游戏内用iframe内嵌的，请在iframe外层加载sdk，并用postMessage进行通信交互，详细请看【iframe通信代码】，并严格使用该方法接入，否则会造成【联运游戏数据平台】中对应游戏无法提交审核的情况。

*自测时请带上这个参数env=pre，该参数用于访问沙盒环境，并将游戏入库沙盒（一定至少访问一次），提测时请去掉该参数。

*正式广告不是100%展示，设备被屏蔽、手机开启广告拦截，未开通AFG广告类型等原因均会导致广告无法展示
2.2、添加SDK依赖

<script src="https://www.hippoobox.com/static/sdk/adsdk_1.5.0.0.js"></script>
2.3、SDK初始化、广告预加载及展示
*初始化代码请放在</body>之后

<script>
window.h5sdk.init(appKey,top,left,bottom,right,options);
//以下代码参数由2个部分组成, ga, adsense
{
  "ga":{
    // GA跟踪代码ID，有了它，athena埋点会同步上报到谷歌，请联系Dlightek对接人获取
    "id":"UA-1234567-1" 
  },
  "adsense":{
    "client":"ca-pub-1234567890", // adsense client id
    "data-ad-frequency-hint":"45s", // 广告频次限制，最小值45s
    "data-adbreak-test":"on", // 启用测试模式，若想启用正式模式请删掉该字段
    "data-ad-channel":"987654321", // 游戏广告自定义渠道ID
    
    // 热启动广告，既手机锁屏/恢复，浏览器切换时展示的广告
    // pauseCallback 和 resumeCallback 必须两个同时存在，才会展示热启动广告
    // 如果游戏没有暂停/重新开始的方法，则把这两个删掉
    "pauseCallback":()=>{
      console.log("👩💻 my game paused");
      // ---请在这里加入游戏暂停代码---
    },
    "resumeCallback":()=>{
      console.log("👩💻 my game restart");
      // ---请在这里加入游戏重新开始代码---
    },
    
    "callback":()=>{ // 初始化成功后回调
      window.h5sdk.athenaSend("game_start", "my_game_name");//开始游戏自定义埋点
      window.h5sdk.adConfig({
        preloadAdBreaks: "on",
        onReady: () => {
          // 不要在这里初始化游戏，因为onReady有失败的情况！！！
          // 展示广告
          // 当广告展示失败错误为notReady, timeout, noAdPreloaded, other的时候，会展示兜底广告
          window.h5sdk.adBreak({
            type: "preroll",
            name: "my_preroll",
            adBreakDone: () => {},// 也不要在这里初始化游戏，因为用户不关闭广告，则游戏无法初始化！！！
          });
        },
      });
    },
  }
}
</script>
*以上代码已经包含广告预加载配置与广告展示的用法和参数

广告预加载配置方法：window.h5sdk.adConfig
adConfig() 调用会将游戏的当前配置传递给 Ad Placement API。Ad Placement API 可以借此调整广告的预加载方式，并过滤所请求的广告类型，以选择合适的类型（例如，需要声音的视频广告）。

函数签名：

adConfig({
   preloadAdBreaks: 'on|auto',  // Ad preloading strategy
   sound: 'on|off'              // This game has sound
   onReady: () => {},           // Called when API has initialised and adBreak() is ready
});
详细参数介绍请参考谷歌参数用法：

https://developers.google.com/ad-placement/apis/adconfig?hl=zh-cn

广告展示方法（开屏、插屏、激励视频）：window.h5sdk.adBreak
adBreak()用法

函数签名：

adBreak(
   type: '<type>',                     // The type of this placement
   name: '<name>',                     // A descriptive name for this placement
   beforeAd: () => {},                 // Prepare for the ad. Mute and pause the game flow
   afterAd: () => {},                  // Resume the game and re-enable sound
   beforeReward: (showAdFn) => {},     // Show reward prompt (call showAdFn() if clicked)
   adDismissed: () => {},              // Player dismissed the ad before completion
   adViewed: () => {},                 // Ad was viewed and closed
   adBreakDone: (placementInfo) => {}, // Always called (if provided) even if an ad didn't show
);
adBreak()参数

名称	类型	说明
所有展示位置类型
type	字符串	展示位置类型。值：游戏加载前的 'preroll'（界面呈现之前）游戏开始前的 'start'（界面呈现之后）'pause'，玩家暂停游戏'next'，玩家进入下一关'browse'，玩家在游玩间隙浏览其他选项'reward'，激励广告
name	字符串	（可选）游戏中特定广告展示位置的名称。这是一个内部标识符，不会向玩家显示。在未来版本中，此标识符可用于启用其他报告和优化功能。

我们建议您为所有展示位置命名。
beforeAd	函数	（可选）在展示广告之前调用。游戏此时应当暂停并静音。这两项操作必须同步完成。此回调完成后，广告将立即展示。
afterAd	函数	（可选）无论出于任何原因，都应在广告展示完毕后调用。对于激励广告，此方法会在 adDismissed 或 adViewed 之后调用，具体取决于玩家操作。此函数应该用于恢复游戏流程。例如，用于取消静音并开始下一关。
adBreakDone	函数	（可选）始终作为 adBreak() 中的最后一步调用，即使广告没有展示也是如此。函数将作为 placementInfo 对象定义的参数，如下所示：{ breakType: '<type>', breakName: '<name>', breakFormat: 'interstitial|reward', breakStatus: 'error|noAdPreloaded|...|viewed', }如需详细了解展示位置信息对象，请参阅 。
仅限激励广告展示位置…
beforeReward	函数	在激励广告可以投放时调用。该函数应该会接收一个参数 - showAdFn()，您必须调用该参数才能展示激励广告。
adDismissed	函数	仅在玩家关闭广告时针对激励广告调用。仅当玩家在广告结束前关闭广告时调用。在这种情况下，不应给予奖励。
adViewed	函数	仅在玩家看完广告后针对激励广告调用，应向玩家提供奖励。
详细参数介绍请参考谷歌参数用法：
https://developers.google.com/ad-placement/apis/adbreak?hl=zh-cn
https://developers.google.com/ad-placement/docs/placement-types?hl=zh-cn

Banner广告展示
把Dlightek运营人员给到的Banner代码固定在游戏页面底部（根据自己的页面情况加入css）

<ins class="adsbygoogle"
     style="display:inline-block;width:320px;height:50px"
     data-ad-client="YOUR CLIENT ID"
     data-ad-slot="YOUR SLOT ID"></ins>
<script>
  (adsbygoogle = window.adsbygoogle || []).push({});
</script>
初始化方法：window.h5sdk.init(appKey,top,left,bottom,right,options);
参数说明：

appKey: 游戏的唯一标识，游戏物料上传表单获取

top, left, bottom, right 传空字符串

options：请看上面【SDK初始化、广告预加载及展示】

例如：

window.h5sdk.init(1234567, "", "", "", "", options);


2.4、iframe通信代码
代码请参考DEMO： 

外层：

<!-- 必须在外层加载sdk -->
<script src="https://www.hippoobox.com/static/sdk/adsdk_1.5.0.0.js"></script>
...

// 向iframe发送消息
function postMessageToIframe(params) {
  iframe.contentWindow.postMessage(
        JSON.stringify(params),
        "https://www.ahagamecenter.com" // iframe的域名
  );
}

// 注册消息接收
window.addEventListener("message", (e) => {
  // 根据消息来源的域名，判断是否过滤
  if (e.origin !== "https://www.ahagamecenter.com") {
        console.warn("其他消息（来自：" + e.origin + "）");
        return;
  }
  console.log(e, "从iframe发过来的消息");
  try {
        const iframe = document.getElementById("iframe");
        const paramsFromIframe = JSON.parse(e.data);
        // 根据func，执行不同广告
        if (paramsFromIframe.func === "adBreakReward") {
          window.h5sdk.adBreak({
                type: "reward",
                name: "my_reward",
                beforeAd: () => {
                  console.log("beforeAd");
                },
                afterAd: () => {
                  console.log("afterAd");
                },
                adDismissed: () => {
                  console.log("adDismissed");
                },
                adViewed: () => {
                  console.log("adViewed");
                },
                beforeReward: (showAdFn) => {
                  console.log("beforeReward");
                  showAdFn();
                },
                adBreakDone: (placementInfo) => {
                  postMessageToIframe({
                        func: "adBreakDoneReward",
                        placementInfo,
                  });
                },
          });
        }
  } catch (error) {
        console.log(error);
  }
});
iframe层：
// 向父window发送消息
function postMessageToParent(params) {
  window.parent.postMessage(
        JSON.stringify(params),
        "https://www.ahagamecenter.com" // 父window的域名
  );
}

// 展示激励广告
postMessageToParent({ func: "adBreakReward" });

// 注册消息接收
window.addEventListener("message", (e) => {
  // 根据消息来源的域名，判断是否过滤
  if (e.origin !== "https://www.ahagamecenter.com") {
        console.warn("其他消息（来自：" + e.origin + "）");
        return;
  }
  console.log(e, "从父window发过来的消息");
  try {
        const paramsFromParent = JSON.parse(e.data);
        // 根据func，执行不同逻辑
        if (paramsFromParent.func === "adBreakDoneReward") {
          if (paramsFromParent.placementInfo.breakStatus === "dismissed") {
                alert("取消观看" + paramsFromParent.placementInfo.breakStatus);
                return;
          } else if (
paramsFromParent.placementInfo.breakStatus !== "viewed"
) {
                alert("广告异常" + paramsFromParent.placementInfo.breakStatus);
                return;
          }
    }
  } catch (error) {
        console.log(error);
  }
});

三、Athena埋点接入指南
初始化
加载H5广告SDK并初始化，就会自动加载Athena并初始化

更多详情信息请看https://dsu-h-test.shalltry.com/athena/wiki/#/js_sdk_init  

上报自定义事件
window.h5sdk.athenaSend(eventname,param1,param2);
参数说明：

eventname: 自定义埋点事件名

param1: 参数1

param2: 参数2

例如：

window.h5sdk.athenaSend("myActionName", "myParam1","myParam2");
*以下是一些预定义的事件名，可以涵盖大部分场景，具体见下：

H5自定义埋点规范
序号	事件名称	定义说明	跟参	定义说明
1	game_start	打开游戏上报(上报该事件后，每30秒会自动上报play_time事件，参数为1)	游戏名称（titl）	
2	loading_begin	游戏开始加载上报		
3	loading_end	游戏加载完成上报（不是进入游戏页面）		
4	load_adsbygoogle	谷歌JS开始加载上报		
5	loaded_adsbygoogle	JS加载完毕上报		
6	turn_screen	转屏提示页面上报		
7	horizontal	横屏动作上报		
8	game_page	游戏主页面（显示游戏主页面）		
9	level_begin	关卡开始	跟参值	整数、关卡序号
10	level_end	关卡结束	跟参值	Fail/Pass
11	level_reward	关卡奖励	跟参值	是否出现出现广告激励选项（是-1 否-0）
12	level_next	过关点击	跟参值	
13	reward_click	各种具体激励场景的点击动作（自定义）	场景名（商店、道具解锁、签到等）	示例： game_skip notenoughlayer


四、常见问题
1.游戏提测前，必须要带上?env=pre访问一次（例如https://mygame.com/?env=pre），因为这时有后台同步数据的操作

2.如果游戏是用iframe展示，则需要用【2.4、iframe通信代码】里的方法接入SDK并通讯展示

3.正式广告不是100%展示，设备被屏蔽、手机开启广告拦截，未开通AFG广告类型等原因均会导致广告无法展示，建议在浏览器隐私模式下，多换几个手机刷新尝试



最后，在新产品的实施过程中，如果遇到具体的问题，必须提供实际的页面 URL，来复现问题， 否则很难分析定位问题。